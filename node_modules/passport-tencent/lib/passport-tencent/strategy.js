/**
 * Module dependencies.
 */
var util = require('util')
  , querystring= require('querystring')
  , OAuth2Strategy = require('./strategies/oauth2')
  , InternalOAuthError = require('./errors/internaloautherror');


/**
 * `Strategy` constructor.
 *
 * The Tencent authentication strategy authenticates requests by delegating to
 * Tencent using the OAuth 2.0 protocol.
 *
 * Applications must supply a `verify` callback which accepts an `accessToken`,
 * `refreshToken` and service-specific `profile`, and then calls the `done`
 * callback supplying a `user`, which should be set to `false` if the
 * credentials are not valid.  If an exception occured, `err` should be set.
 *
 * Options:
 *   - `clientID`      your Tencent application's Client ID
 *   - `clientSecret`  your Tencent application's Client Secret
 *   - `callbackURL`   URL to which Tencent will redirect the user after granting authorization
 *   - `scope`         array of permission scopes to request.  valid scopes include:
 *                     'user', 'public_repo', 'repo', 'gist', or none.
 *                     (see http://developer.github.com/v3/oauth/#scopes for more info)
 *
 * Examples:
 *
 *     passport.use(new SinaStrategy({
 *         clientID: '123-456-789',
 *         clientSecret: 'shhh-its-a-secret'
 *         callbackURL: 'https://www.example.net/auth/github/callback'
 *       },
 *       function(accessToken, refreshToken, profile, done) {
 *         User.findOrCreate(..., function (err, user) {
 *           done(err, user);
 *         });
 *       }
 *     ));
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */
function Strategy(options, verify) {
  options = options || {};
  options.authorizationURL = options.authorizationURL || 'https://open.t.qq.com/cgi-bin/oauth2/authorize';
  options.tokenURL = options.tokenURL || 'https://open.t.qq.com/cgi-bin/oauth2/access_token';
  options.scopeSeparator = options.scopeSeparator || ',';
  //options.passReqToCallback = passReqToCallback;
  
  OAuth2Strategy.call(this, options, verify);
  this.name = 'tencent';
  this.clientid = options.clientID;
}

/**
 * Inherit from `OAuth2Strategy`.
 */
util.inherits(Strategy, OAuth2Strategy);


/**
 * Retrieve user profile from Tencent.
 *
 * This function constructs a normalized profile, with the following properties:
 *
 *   - `provider`         always set to `github`
 *   - `id`               the user's Tencent ID
 *   - `username`         the user's Tencent username
 *   - `displayName`      the user's full name
 *   - `profileUrl`       the URL of the profile for the user on Tencent
 *   - `emails`           the user's email addresses
 *
 * @param {String} accessToken
 * @param {Function} done
 * @api protected
 */
Strategy.prototype.userProfile = function(accessToken, openid, clientip, done) {
    console.log('openid:' + openid);
    var paramStr = querystring.stringify({
        openid: openid,
        clientip: clientip,
        oauth_consumer_key: this.clientid,
        oauth_version: "2.a",
        scope: "all"
    });
    console.log('paramStr:' + paramStr);
    this._oauth2.get('https://open.t.qq.com/api/user/info?'+paramStr, accessToken, function(err, body){
        if (err) { return done(new InternalOAuthError('failed to fetch user profile', err)); }

        console.log('body: ' + body);

        var json = JSON.parse(body);
        var profile = { provider: 'tencent' };

        profile.uid = json.data.name;
        profile.name = json.data.nick;

        profile._raw = body;
        profile._json = json;
        done(null, profile);
    });
}


/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
